<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://git-best.github.io/</id><title>ChungChung's Blog</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2022-05-02T22:02:34+09:00</updated> <author> <name>ChungChung</name> <uri>https://git-best.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://git-best.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://git-best.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 ChungChung </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Akka 기초 1-6 | 액터 라이프 사이클</title><link href="https://git-best.github.io/posts/Akka1.6/" rel="alternate" type="text/html" title="Akka 기초 1-6 | 액터 라이프 사이클" /><published>2022-05-02T01:00:00+09:00</published> <updated>2022-05-02T01:00:00+09:00</updated> <id>https://git-best.github.io/posts/Akka1.6/</id> <content src="https://git-best.github.io/posts/Akka1.6/" /> <author> <name>ChungChung</name> </author> <category term="Akka" /> <summary> Akka 기초 1-6 | 액터 라이프 사이클 액터 라이프 사이클이란? 액터가 생성되고 시작된 다음 대부분의 삶을 메시지를 받는 데 보낸다. 액터가 더 이상 필요하지 않은 경우 액터를 종료하거나 “중지”할 수 있습니다. 액터 라이프 사이클 Akka.NET에는 액터 수명 주기의 5단계가 있다. Starting Receiving Stopping Termiated or Restarting Starting 액터가 ActorSystem에 의해 초기화 될 때의 초기 상태이다. Receving 이제 액터는 메세지를 처리 할 수 있다. Mailbox는 처리를 위해 액터의 OnReceive 메소드로 메세지를 전달하기 시작한다. Stopping 이 단계에... </summary> </entry> <entry><title>Akka 기초 1-5 | ActorSelection과 함께 주소로 액터 찾기</title><link href="https://git-best.github.io/posts/Akka1.5/" rel="alternate" type="text/html" title="Akka 기초 1-5 | ActorSelection과 함께 주소로 액터 찾기" /><published>2022-05-02T01:00:00+09:00</published> <updated>2022-05-02T21:58:23+09:00</updated> <id>https://git-best.github.io/posts/Akka1.5/</id> <content src="https://git-best.github.io/posts/Akka1.5/" /> <author> <name>ChungChung</name> </author> <category term="Akka" /> <summary> Akka 기초 1-5 | ActorSelection과 함께 주소로 액터 찾기 ActorSelection이란? ActorSelection은 IActorRef를 저장해 두지 않은 상태에서 액터에 메세지를 보낼 수 있도록 액터의 handle을 찾기 위해 액터 주소를 이용한 것이다. 액터가 알고 있는 IActorRef를 통해 액터를 생성하거나 소멸시키는 작업을 하는 대신, ActorPath를 통해 액터의 handle을 찾아서 할 수 있다. ActorSelection이 IActorRef를 찾는 방식이지만, 본질적으로 단일 액터를 1대1로 찾는 것은 아니라는 점을 유념해야 한다. 기술적으로, 조회할 때 표시되는 ActorSelection 객체는 특정 IActorRef를 가르키지 않는다. 검색한 ... </summary> </entry> <entry><title>LINQ to Objects의 기초</title><link href="https://git-best.github.io/posts/CSharp-LINQ/" rel="alternate" type="text/html" title="LINQ to Objects의 기초" /><published>2022-04-20T01:00:00+09:00</published> <updated>2022-04-20T20:49:01+09:00</updated> <id>https://git-best.github.io/posts/CSharp-LINQ/</id> <content src="https://git-best.github.io/posts/CSharp-LINQ/" /> <author> <name>ChungChung</name> </author> <category term="LINQ" /> <summary> LINQ to Objects의 기초 LINQ란 “Language Integrated Quer”를 축약한 것이며 한국어로는 ‘언어로 통합된 쿼리’라고 말할 수 있다. LINQ를 사용하면 객체, 데이터, XML과 같은 다양한 데이터를 표준화된 방법으로 처리할 수 있다. LINQ to Objects의 간단한 예 var names = new List&amp;lt;string&amp;gt;{ "Seoul", "New Delhi", "Bangkok", "London", "Paris", "Berlin", "Canberra", "Hong Kong" }; IEnumerable&amp;lt;string&amp;gt; query = names.Where(s =&amp;gt; s.Length &amp;lt;= 5); foreach(string s i... </summary> </entry> <entry><title>Akka 기초 1-4 | 자식 액터, 액터 계층 구조, 그리고 감시(Supervision)</title><link href="https://git-best.github.io/posts/Akka1.4/" rel="alternate" type="text/html" title="Akka 기초 1-4 | 자식 액터, 액터 계층 구조, 그리고 감시(Supervision)" /><published>2022-04-20T01:00:00+09:00</published> <updated>2022-05-02T20:05:38+09:00</updated> <id>https://git-best.github.io/posts/Akka1.4/</id> <content src="https://git-best.github.io/posts/Akka1.4/" /> <author> <name>ChungChung</name> </author> <category term="Akka" /> <summary> Akka 기초 1-4 | 자식 액터, 액터 계층 구조, 그리고 감시(Supervision) 계층 구조의 원자화 작업 계층 구조를 가지는 것은 아주 작은 조각으로 작업을 쪼개고, 서로 다른 계층의 레벨에서 다른 전문 기술을 활용할 수 있게 한다. 액터 시스템에서 이것이 실현되는 일반적인 방법은 큰 데이터 스트림을 원자화하는 것이다. 트위터를 예로 들자면 Akka를 사용하면 대용량 데이터 수집을 작고, 처리하기 쉬운 정보의 흐름으로 분해할 수 있다. 트위터의 경우 거대한 소방호스를 통해 뿜어져 나오는 것 같은 트윗들을 각 유저들의 타임라인에 작은 물줄기 하나한로 나누어 분산할 수 있다. Akka를 사용하여 해당 유저의 스트림으로 도착한 메세지를 websoket ... </summary> </entry> <entry><title>xUnit.net 시작하기</title><link href="https://git-best.github.io/posts/.NET-xUnit/" rel="alternate" type="text/html" title="xUnit.net 시작하기" /><published>2022-04-20T01:00:00+09:00</published> <updated>2022-04-20T01:00:00+09:00</updated> <id>https://git-best.github.io/posts/.NET-xUnit/</id> <content src="https://git-best.github.io/posts/.NET-xUnit/" /> <author> <name>ChungChung</name> </author> <category term="xUnit" /> <summary> xUnit.net 시작하기 단위 테스트 프로젝트 만들기 xUnit 테스트 프로젝트를 만든다. 프로젝트 파일 구조 &amp;lt;Project Sdk="Microsoft.NET.Sdk"&amp;gt; &amp;lt;PropertyGroup&amp;gt; &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt; &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt; &amp;lt;IsPackable&amp;gt;false&amp;lt;/IsPackable&amp;gt; &amp;lt;/PropertyGroup&amp;gt; &amp;lt;ItemGroup&amp;gt; &amp;lt;PackageReference Include="Microsoft.NET.Test.Sdk" Version=... </summary> </entry> </feed>
